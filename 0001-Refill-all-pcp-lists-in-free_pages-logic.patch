From 7e6d399211e7bd77ee98b929f62d8790097a3632 Mon Sep 17 00:00:00 2001
From: Bharath Vedartham <linux.bhar@gmail.com>
Date: Mon, 17 Jun 2019 01:11:58 +0530
Subject: [PATCH] Refill all pcp lists in free_pages logic

---
 mm/page_alloc.c | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index d66bc8a..2ccd31c 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2956,6 +2956,9 @@ static void free_unref_page_commit(struct page *page, unsigned long pfn)
 	struct zone *zone = page_zone(page);
 	struct per_cpu_pages *pcp;
 	int migratetype;
+	int start_migratetype = 0;
+	struct list_head *list; 
+	unsigned int alloc_flags = 0; 
 
 	migratetype = get_pcppage_migratetype(page);
 	__count_vm_event(PGFREE);
@@ -2978,6 +2981,18 @@ static void free_unref_page_commit(struct page *page, unsigned long pfn)
 	pcp = &this_cpu_ptr(zone->pageset)->pcp;
 	list_add(&page->lru, &pcp->lists[migratetype]);
 	pcp->count++;
+
+	// refill the pcp lists here rather than doing it in the fast path
+	for (start_migratetype < MIGRATE_PCPTYPES; start_migratetype++) {
+		list = &pcp->lists[start_migratetype];
+
+		if (list_empty(list)) {
+			pcp->count += rmqueue_bulk(zone, 0, 
+					pcp->batch, list, 
+					start_migratetype, alloc_flags);
+		}
+	}
+
 	if (pcp->count >= pcp->high) {
 		unsigned long batch = READ_ONCE(pcp->batch);
 		free_pcppages_bulk(zone, batch, pcp);
@@ -3144,14 +3159,6 @@ static struct page *__rmqueue_pcplist(struct zone *zone, int migratetype,
 	struct page *page;
 
 	do {
-		if (list_empty(list)) {
-			pcp->count += rmqueue_bulk(zone, 0,
-					pcp->batch, list,
-					migratetype, alloc_flags);
-			if (unlikely(list_empty(list)))
-				return NULL;
-		}
-
 		page = list_first_entry(list, struct page, lru);
 		list_del(&page->lru);
 		pcp->count--;
-- 
2.7.4

