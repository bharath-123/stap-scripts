From 333cb4b4889ada9b634f230e25ef172bfdd85bb6 Mon Sep 17 00:00:00 2001
From: Bharath Vedartham <linux.bhar@gmail.com>
Date: Thu, 11 Jul 2019 15:15:01 -0600
Subject: [PATCH] mm/lsq.c: Introduce time threshold in predict

predict used a threshold based on number of pages at the point of
exhaustaion. This can depend on system state and other various factor like the
working set of the system. Instead use a time threshold which is independend
of the state of the system.

If we the point of intersection is anywhere in the nearby future or just
occured in the near past, then don't let kswapd sleep.

Signed-off-by: Bharath Vedartham <linux.bhar@gmail.com>
---
 include/linux/mmzone.h |  2 ++
 mm/lsq.c               | 46 +++++++++++++++-------------------------------
 2 files changed, 17 insertions(+), 31 deletions(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index a4a47a8..9181437 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -308,6 +308,8 @@ struct per_cpu_nodestat {
  */
 #define LOOKBACK 8
 
+#define TIME_THRESHOLD 20
+
 /*
  * This is a per zone structure which contains the details to compute a least square line.
  * There is one structure for each order. 
diff --git a/mm/lsq.c b/mm/lsq.c
index df332a7..1afdb61 100644
--- a/mm/lsq.c
+++ b/mm/lsq.c
@@ -104,7 +104,7 @@ int predict(unsigned long *frag_vec, struct lsq_struct *lsq)
 	long long m[MAX_ORDER];
 	long long c[MAX_ORDER];
 	int is_ready = 1;
-	long long f_T_zero, R_T, f_f_zero, R_f, t_e, f_e;
+	long long f_T_zero, R_T, f_f_zero, R_f, t_e;
 
 	for(order = 0; order < MAX_ORDER; order++) {
 		if (lsq_fit(&lsq[order], frag_vec[order], &m[order],
@@ -122,43 +122,27 @@ int predict(unsigned long *frag_vec, struct lsq_struct *lsq)
 		f_f_zero = c[order];
 		R_f = m[order];
 
-		if (f_T_zero <= f_f_zero)
+		/*
+		 * If lines are parallel, then they never intersect.
+		 */
+		if (R_T == R_f)
 			continue;
+
 		/*
-		 * There are only two reasons to begin compaction immediately,
-		 * i.e. at the beginning of this interval.  The first is that
-		 * the alternative would be exhaustion before the beginning of
-		 * the next interval.
+		 * Find the point of intersection of the
+		 * two lines.
 		 */
-		if (R_T < R_f) {
-			t_e = div64_long((f_T_zero - f_f_zero),
+		t_e = div64_long((f_T_zero - f_f_zero),
 					(R_f - R_T));
-			if (t_e < 1) {
-				/*
-				 * Don't bother compacting if the expected
-				 * fragmentation improves upon the given
-				 * threshold.																	*/
-				f_e = R_T * t_e + f_T_zero;
-				if (f_e > threshold)
-					return 1;
-			}
-		}
 
 		/*
-		 * The second reason is that deferring compaction until the
-		 * start of the next interval would result, at the time of
-		 * exhaustion, in a surfeit of free fragmented memory above the
-		 * desired threshold.
+		 * If they intersect anytime soon in the future
+		 * or intersected recently in the past. Then don't
+		 * let kswapd sleep.
 		 */
-		if (R_T < R_f + R_c) {
-			t_e = div64_long((f_T_zero - f_f_zero + R_c),
-					(R_f + R_c - R_T));
-			if (t_e > 1) {
-				f_e = R_T * t_e + f_T_zero;
-				if (f_e > threshold)
-					return 1;
-			}
-		}
+		if (t_e < TIME_THRESHOLD && t_e > -TIME_THRESHOLD)
+			return 1;
+		
 	}
 
 	return 0;
-- 
1.8.3.1

